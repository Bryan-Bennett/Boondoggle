<?xml version="1.0" encoding="utf-8"?>
<topic id="2de88a28-9f64-4de4-ae39-0f847e4339d1" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        The Boondoggle .NET Namespace Extension Libraries are a suite of libraries that extend the namespaces defined within .NET assemblies like
        System, System.Reflection, and more.  Its purpose is to expose 'common types' in relevant namespaces that 'extend' or add to the namespace.
        Since Boondoggle libraries use .NET namespaces, consumers of the libraries need only reference a Boondoggle library to use the types within
        the Boondoggle libraries.
        
        Note: If a Boondoggle type was to ever conflict with a type defined by Microsoft, the Boondoggle type will be removed or renamed.
      </para>
    </introduction>

    <section>
      <title>Getting Started</title>
      <content>
        <para>
          To get started, simply add a NuGet reference to any of the Boondoggle libraries.  If you want all libraries, simply add a NuGet reference
          to the Boondoggle.All package.  If referencing Boondoggle.All, ensure no other references to other Boondoggle assemblies exist.  Conversely,
          if referencing single Boondoggle packages, ensure you do not reference the Boondoggle.All package.
        </para>

        <!--<list class="bullet">
          <listItem>
            <para>
              <localUri>ContentLayout.content</localUri> - Use the content layout file to manage the
              conceptual content in the project and define its layout in the table of contents.
            </para>
          </listItem>

          <listItem>
            <para>
              The <localUri>.\media</localUri> folder - Place images in this folder that you will reference
              from conceptual content using <codeInline>medialLink</codeInline> or <codeInline>mediaLinkInline</codeInline>
              elements.  If you will not have any images in the file, you may remove this folder.
            </para>
          </listItem>

          <listItem>
            <para>
              The <localUri>.\icons</localUri> folder - This contains a default logo for the help file.  You
              may replace it or remove it and the folder if not wanted.  If removed or if you change the file name, update
              the <ui>Transform Args</ui> project properties page by removing or changing the filename in the
              <codeInline>logoFile</codeInline> transform argument.  Note that unlike images referenced from conceptual topics,
              the logo file should have its <legacyBold>BuildAction</legacyBold> property set to <codeInline>Content</codeInline>.
            </para>
          </listItem>

          <listItem>
            <para>
              The <localUri>.\Content</localUri> folder - Use this to store your conceptual topics.  You may
              name the files and organize them however you like.  One suggestion is to lay the files out on disk as you have
              them in the content layout file as shown in this project but the choice is yours.  Files can be added via the
              Solution Explorer or from within the content layout file editor.  Files must appear in the content layout file
              in order to be compiled into the help file.
            </para>
          </listItem>
        </list>

        <para>
          See the <legacyBold>Conceptual Content</legacyBold> topics in the Sandcastle Help File Builder's
          help file for more information.  See the <legacyBold> Sandcastle MAML Guide</legacyBold> for details on Microsoft
          Assistance Markup Language (MAML) which is used to create these topics.
        </para>-->
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="4ca3792b-cd8a-44e5-be43-781439e035aa" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>
